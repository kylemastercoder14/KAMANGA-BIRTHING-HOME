generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  name      String
  password  String
  role      Role     @default(STAFF)
  image     String?
  biodata   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notes      Notes[]
  systemLogs SystemLogs[]
  events     Events[]
}

enum Role {
  ADMIN
  STAFF
}

model HouseHold {
  id              String   @id @default(uuid())
  location        String? // Sitio 1, Sitio 2
  householdNumber String   @unique
  monthlyIncome   Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  profiles Profile[]
}

model FacilityBasedDelivery {
  id                String   @id @default(uuid())
  label             String // e.g. "Live Birth"
  facilityMale      Boolean  @default(false)
  facilityFemale    Boolean  @default(false)
  nonFacilityMale   Boolean  @default(false)
  nonFacilityFemale Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
}

model BabyData {
  id        String   @id @default(uuid())
  weight    Float
  height    Float
  muac      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
}

model Profile {
  id String @id @default(uuid())

  areYou4ps Boolean @default(false)
  areYouIps Boolean @default(false)
  areYouPwd Boolean @default(false)

  firstName               String
  middleName              String?
  lastName                String
  relationship            String
  birthDate               DateTime
  age                     Int
  sex                     String
  odkMember               Boolean   @default(false)
  occupation              String?
  educationalAttainment   String?
  religion                String?
  ethnicGroup             String?
  philhealthNumber        String?
  emergencyContactName    String?
  emergencyContactNumber  String?
  areYouPregnant          Boolean   @default(false)
  lastMenstrualPeriod     DateTime?
  expectedDeliveryDate    DateTime?
  doYouBreastfeed         Boolean   @default(false)
  immunizedChildren       Boolean   @default(false)
  marriedCouple           String?
  sanitizedToilet         String
  constructedDateToilet   DateTime?
  presumptiveTubercolosis Boolean   @default(false)
  broughtToFacility       Boolean   @default(false)
  dwellingType            String?
  waterSource             String?
  vegetables              String[]
  animals                 String[]
  bingeDrinker            Boolean   @default(false)
  smoker                  Boolean   @default(false)
  garbageDisposal         String?
  hypertension            String?
  diabetes                String?
  bothSickness            String?
  oscaNumber              Int?
  pwdInformation          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  householdId String
  household   HouseHold @relation(fields: [householdId], references: [id])

  babyData              BabyData[]
  facilityBasedDelivery FacilityBasedDelivery[]
}

model Notes {
  id       String       @id @default(uuid())
  template TemplateType
  content  String
  tags     String[]
  color    String
  order    Int
  isPinned Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum TemplateType {
  BLANK_NOTE
  TODO_LIST
  REMINDER
  MEETING_NOTES
  BRAINSTORM
}

model BackupHistory {
  id        String   @id @default(cuid())
  action    String
  filename  String
  status    String
  createdAt DateTime @default(now())
}

model SystemLogs {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  details   String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Events {
  id          String    @id @default(uuid())
  title       String
  description String
  start       DateTime?
  end         DateTime?
  allDay      Boolean   @default(false)
  color       String?
  location    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model HealthProgram {
  id                    String   @id @default(uuid())
  title                 String
  description           String
  instructor            String
  instructorDescription String
  tags                  String[]
  thumbnailUrl          String
  viewsCount            Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sections ProgramSection[]
}

model ProgramSection {
  id            String  @id @default(uuid())
  title         String
  description   String?
  videoUrl      String
  totalDuration Int
  order         Int

  healthProgramId String
  healthProgram   HealthProgram @relation(fields: [healthProgramId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FileNode {
  id          String     @id @default(cuid())
  name        String
  type        FileType
  icon        String
  date        DateTime
  size        String
  ownerName   String
  ownerAvatar String
  parentId    String?
  parent      FileNode?  @relation("FileChildren", fields: [parentId], references: [id])
  children    FileNode[] @relation("FileChildren")
}

enum FileType {
  file
  folder
}
